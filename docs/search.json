[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "나의 사이트",
    "section": "",
    "text": "#파이썬 코드 청크 * 단축키: ctrl + Alt + I"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\ndf=pd.DataFrame({\n                    \"제품\":[\"사과\",'딸기','수박'],\n                    \"가격\":[1800,1500,3000],\n                    \"판매량\":[24,38,13]\n})\n\nsum(df[\"가격\"])/3\nnp.mean(df[\"판매량\"])\n\nnp.float64(25.0)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n# 수달 야구 최고~"
  },
  {
    "objectID": "HW2.html",
    "href": "HW2.html",
    "title": "HW2",
    "section": "",
    "text": "##144p #1\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\ndf.head\ndf[\"displ\"] #데이터뽑기\nlow=df.query(\"displ&lt;=4\") #정해진 데이터 뽑기 안됨 조건문만 가능\nhigh=df.query(\"displ&gt;=5\")\n\nhigh[\"hwy\"]\nprint(np.mean(low[\"hwy\"]))\nprint(np.mean(high[\"hwy\"]))\nnp.mean(low[\"hwy\"])\nnp.mean(low[\"hwy\"]) &gt;=np.mean(high[\"hwy\"])\n\n25.96319018404908\n18.07894736842105\n\n\nnp.True_\n\n\n##144p #2\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\nau=df.query('manufacturer == \"audi\"')\nto=df.query('manufacturer == \"toyota\"')\nau\nprint(np.mean(au[\"cty\"]))\nprint(np.mean(to[\"cty\"]))\nnp.mean(au[\"cty\"])&gt;=np.mean(to[\"cty\"])\n\n17.61111111111111\n18.529411764705884\n\n\nnp.False_\n\n\n144 #3\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\ncar=df.query('manufacturer==\"chevrolet\"' and 'manufacturer == \"ford\"' and 'manufacturer == \"honda\"')\n\nnp.mean(car[\"hwy\"]) #아래까지 가능\ncar[\"hwy\"].mean()\n\nnp.float64(32.55555555555556)\n\n\n#153\n\nimport pandas as pd\nimport numpy as np\ndf=pd.read_csv(\"data/mpg.csv\")\nau=df.query('manufacturer==\"audi\"')\nau=au.sort_values(['hwy'],ascending=[True])\nau.head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n17\naudi\na6 quattro\n4.2\n2008\n8\nauto(s6)\n4\n16\n23\np\nmidsize\n\n\n15\naudi\na6 quattro\n2.8\n1999\n6\nauto(l5)\n4\n15\n24\np\nmidsize\n\n\n14\naudi\na4 quattro\n3.1\n2008\n6\nmanual(m6)\n4\n15\n25\np\ncompact\n\n\n11\naudi\na4 quattro\n2.8\n1999\n6\nauto(l5)\n4\n15\n25\np\ncompact\n\n\n8\naudi\na4 quattro\n1.8\n1999\n4\nauto(l5)\n4\n16\n25\np\ncompact\n\n\n\n\n\n\n\n##158p\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\n#1\ndfc=df.copy()\ndfc[\"add\"]=dfc[\"cty\"]+dfc[\"hwy\"]\nprint(dfc.head())\n#2\ndfc[\"mean\"]=dfc[\"add\"]/2\n#3\ndfc=dfc.sort_values(['mean'],ascending = [False])\ndfc.head(3)\n#4\ndf = df.assign( add= lambda x: x[\"cty\"]+x[\"hwy\"],\n          mean= lambda x: x[\"add\"]/2)\\\n          .sort_values('mean',ascending =[False])\\\n          .head()\ndf    \n\n  manufacturer model  displ  year  cyl       trans drv  cty  hwy fl category  \\\n0         audi    a4    1.8  1999    4    auto(l5)   f   18   29  p  compact   \n1         audi    a4    1.8  1999    4  manual(m5)   f   21   29  p  compact   \n2         audi    a4    2.0  2008    4  manual(m6)   f   20   31  p  compact   \n3         audi    a4    2.0  2008    4    auto(av)   f   21   30  p  compact   \n4         audi    a4    2.8  1999    6    auto(l5)   f   16   26  p  compact   \n\n   add  \n0   47  \n1   50  \n2   51  \n3   51  \n4   42  \n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nadd\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n196\ntoyota\ncorolla\n1.8\n2008\n4\nmanual(m5)\nf\n28\n37\nr\ncompact\n65\n32.5\n\n\n197\ntoyota\ncorolla\n1.8\n2008\n4\nauto(l4)\nf\n26\n35\nr\ncompact\n61\n30.5"
  },
  {
    "objectID": "HW1.html",
    "href": "HW1.html",
    "title": "HW1",
    "section": "",
    "text": "title: “hw1” jupyter: python3\n\n\n84p 1번\n\nimport pandas as pd\nimport numpy as np\n#1\ndf=pd.DataFrame({\n                    \"제품\":[\"사과\",'딸기','수박'],\n                    \"가격\":[1800,1500,3000],\n                    \"판매량\":[24,38,13]\n})\ndf\n#2\nsum(df[\"가격\"])/3\nnp.mean(df[\"판매량\"])\n\nnp.float64(25.0)\n\n\n\n\n115P\n\nimport pandas as pd\nimport numpy as np\n#1\nmpg=pd.read_csv('data/mpg.csv')\n\n\nmpg_c=mpg.copy()\n#2\nmpg_c=mpg_c.rename(columns={\"cty\" : \"city\"})\nmpg_c=mpg_c.rename(columns={\"hwy\" : \"highway\"})\n#3\nmpg_c.head\nmpg_c\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n130P\n\nimport pandas as pd\nimport numpy as np\n#1\nmid=pd.read_csv('data/midwest.csv')\nmid.head()\nmid.tail()\nmid.shape\nmid.info()\nmid.describe()\nmid\n#2\nmid=mid.rename(columns = {\"poptotal\":\"total\"})\nmid=mid.rename(columns = {\"popasian\":\"asian\"})\nmid\n#3\nmid[\"100asian\"]=mid[\"asian\"]/mid[\"total\"]*100\nmid[\"100asian\"].plot.hist()\nimport matplotlib.pyplot as plt # 도표로 보여주게 하기위해서 추가한것 클린하는법은 plt.clf()\nplt.show() # 도표로 보여주게 하기위해서 추가한것 \nplt.clf()\n#4\nmean=np.mean(mid[\"100asian\"])\nmid[\"compare\"] = np.where(mid[\"100asian\"]&gt;mean,\"large\",\"small\")\n#5\ncom=mid[\"compare\"].value_counts()\ncom.plot.bar()\nplt.show()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "blog",
    "section": "",
    "text": "HW3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n교재 챕터8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\n\n\n\n\n\n\n\n\n\n\nHW2\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nInvalid Date\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/HW1/index.html",
    "href": "posts/HW1/index.html",
    "title": "HW1",
    "section": "",
    "text": "84p 1번\n\nimport pandas as pd\nimport numpy as np\n#1\ndf=pd.DataFrame({\n                    \"제품\":[\"사과\",'딸기','수박'],\n                    \"가격\":[1800,1500,3000],\n                    \"판매량\":[24,38,13]\n})\ndf\n#2\nsum(df[\"가격\"])/3\nnp.mean(df[\"판매량\"])\n\nnp.float64(25.0)\n\n\n\n\n115P\n\nimport pandas as pd\nimport numpy as np\n#1\nmpg=pd.read_csv('data/mpg.csv')\n\n\nmpg_c=mpg.copy()\n#2\nmpg_c=mpg_c.rename(columns={\"cty\" : \"city\"})\nmpg_c=mpg_c.rename(columns={\"hwy\" : \"highway\"})\n#3\nmpg_c.head\nmpg_c\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\n130P\n\nimport pandas as pd\nimport numpy as np\n#1\nmid=pd.read_csv('data/midwest.csv')\nmid.head()\nmid.tail()\nmid.shape\nmid.info()\nmid.describe()\nmid\n#2\nmid=mid.rename(columns = {\"poptotal\":\"total\"})\nmid=mid.rename(columns = {\"popasian\":\"asian\"})\nmid\n#3\nmid[\"100asian\"]=mid[\"asian\"]/mid[\"total\"]*100\nmid[\"100asian\"].plot.hist()\nimport matplotlib.pyplot as plt # 도표로 보여주게 하기위해서 추가한것 클린하는법은 plt.clf()\nplt.show() # 도표로 보여주게 하기위해서 추가한것 \nplt.clf()\n#4\nmean=np.mean(mid[\"100asian\"])\nmid[\"compare\"] = np.where(mid[\"100asian\"]&gt;mean,\"large\",\"small\")\n#5\ncom=mid[\"compare\"].value_counts()\ncom.plot.bar()\nplt.show()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB"
  },
  {
    "objectID": "posts/HW2/index.html",
    "href": "posts/HW2/index.html",
    "title": "HW2",
    "section": "",
    "text": "##144p #1\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\ndf.head\ndf[\"displ\"] #데이터뽑기\nlow=df.query(\"displ&lt;=4\") #정해진 데이터 뽑기 안됨 조건문만 가능\nhigh=df.query(\"displ&gt;=5\")\n\nhigh[\"hwy\"]\nprint(np.mean(low[\"hwy\"]))\nprint(np.mean(high[\"hwy\"]))\nnp.mean(low[\"hwy\"])\nnp.mean(low[\"hwy\"]) &gt;=np.mean(high[\"hwy\"])\n\n25.96319018404908\n18.07894736842105\n\n\nnp.True_\n\n\n##144p #2\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\nau=df.query('manufacturer == \"audi\"')\nto=df.query('manufacturer == \"toyota\"')\nau\nprint(np.mean(au[\"cty\"]))\nprint(np.mean(to[\"cty\"]))\nnp.mean(au[\"cty\"])&gt;=np.mean(to[\"cty\"])\n\n17.61111111111111\n18.529411764705884\n\n\nnp.False_\n\n\n144 #3\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\ncar=df.query('manufacturer==\"chevrolet\"' and 'manufacturer == \"ford\"' and 'manufacturer == \"honda\"')\n\nnp.mean(car[\"hwy\"]) #아래까지 가능\ncar[\"hwy\"].mean()\n\nnp.float64(32.55555555555556)\n\n\n#153\n\nimport pandas as pd\nimport numpy as np\ndf=pd.read_csv(\"data/mpg.csv\")\nau=df.query('manufacturer==\"audi\"')\nau=au.sort_values(['hwy'],ascending=[True])\nau.head(5)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n17\naudi\na6 quattro\n4.2\n2008\n8\nauto(s6)\n4\n16\n23\np\nmidsize\n\n\n15\naudi\na6 quattro\n2.8\n1999\n6\nauto(l5)\n4\n15\n24\np\nmidsize\n\n\n14\naudi\na4 quattro\n3.1\n2008\n6\nmanual(m6)\n4\n15\n25\np\ncompact\n\n\n11\naudi\na4 quattro\n2.8\n1999\n6\nauto(l5)\n4\n15\n25\np\ncompact\n\n\n8\naudi\na4 quattro\n1.8\n1999\n4\nauto(l5)\n4\n16\n25\np\ncompact\n\n\n\n\n\n\n\n##158p\n\nimport pandas as pd\nimport numpy as np    \ndf=pd.read_csv(\"data/mpg.csv\")\n#1\ndfc=df.copy()\ndfc[\"add\"]=dfc[\"cty\"]+dfc[\"hwy\"]\nprint(dfc.head())\n#2\ndfc[\"mean\"]=dfc[\"add\"]/2\n#3\ndfc=dfc.sort_values(['mean'],ascending = [False])\ndfc.head(3)\n#4\ndf = df.assign( add= lambda x: x[\"cty\"]+x[\"hwy\"],\n          mean= lambda x: x[\"add\"]/2)\\\n          .sort_values('mean',ascending =[False])\\\n          .head()\ndf    \n\n  manufacturer model  displ  year  cyl       trans drv  cty  hwy fl category  \\\n0         audi    a4    1.8  1999    4    auto(l5)   f   18   29  p  compact   \n1         audi    a4    1.8  1999    4  manual(m5)   f   21   29  p  compact   \n2         audi    a4    2.0  2008    4  manual(m6)   f   20   31  p  compact   \n3         audi    a4    2.0  2008    4    auto(av)   f   21   30  p  compact   \n4         audi    a4    2.8  1999    6    auto(l5)   f   16   26  p  compact   \n\n   add  \n0   47  \n1   50  \n2   51  \n3   51  \n4   42  \n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nadd\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n196\ntoyota\ncorolla\n1.8\n2008\n4\nmanual(m5)\nf\n28\n37\nr\ncompact\n65\n32.5\n\n\n197\ntoyota\ncorolla\n1.8\n2008\n4\nauto(l4)\nf\n26\n35\nr\ncompact\n61\n30.5"
  },
  {
    "objectID": "index.html#수식-입력-방버",
    "href": "index.html#수식-입력-방버",
    "title": "나의 사이트",
    "section": "수식 입력 방버",
    "text": "수식 입력 방버\n\n인라인 수식: $ 하나로 감싸준다. (본문에 입력)\n디스플레이 수식: $ 두개로 감싸준다.(독립적인 문단)\n\n문장안에 숫자 \\(5^2\\)를 넣어보자 여러숫자들을 따로 떼어 표시하자\n\\[\nx^2+ y^2 = 5\n\\angle 4\n\\]"
  },
  {
    "objectID": "index.html#굵게",
    "href": "index.html#굵게",
    "title": "나의 사이트",
    "section": "굵게",
    "text": "굵게\n랜더링 해줘~ 제발\n\n기울림 이탤릭\n이탤릭 기울림\n\n취소선\n제발 되게해줘\n\n순서가있는 리스트\n순서가 없는 리스트\n\n\n되고\n안되고\n\ngithub\n\n\n\n야구\n\n\n\nAnyone can learn anything -야야\n\n\n\n1%1\n\n0\n\n\n각주[^1] 이다\n각주[^가나다]"
  },
  {
    "objectID": "posts/lecture8/index.html",
    "href": "posts/lecture8/index.html",
    "title": "교재 챕터8",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport pandas as pd\nmpg=pd.read_csv(\"data/mpg.csv\")\nmpg.columns\n\nIndex(['manufacturer', 'model', 'displ', 'year', 'cyl', 'trans', 'drv', 'cty',\n       'hwy', 'fl', 'category'],\n      dtype='object')\n\n\n##scater plot 사용\n\nsns.scatterplot(data=mpg,x=\"displ\",y=\"hwy\").set(xlim=[3,6],ylim=[10,30])"
  },
  {
    "objectID": "posts/lecture8/index.html#seaborn-패키지-불러오기",
    "href": "posts/lecture8/index.html#seaborn-패키지-불러오기",
    "title": "교재 챕터8",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport pandas as pd\nmpg=pd.read_csv(\"data/mpg.csv\")\nmpg.columns\n\nIndex(['manufacturer', 'model', 'displ', 'year', 'cyl', 'trans', 'drv', 'cty',\n       'hwy', 'fl', 'category'],\n      dtype='object')\n\n\n##scater plot 사용\n\nsns.scatterplot(data=mpg,x=\"displ\",y=\"hwy\").set(xlim=[3,6],ylim=[10,30])"
  },
  {
    "objectID": "posts/lecture8/index.html#barplot-사용하기",
    "href": "posts/lecture8/index.html#barplot-사용하기",
    "title": "교재 챕터8",
    "section": "barplot() 사용하기",
    "text": "barplot() 사용하기\n#데이터 전처리하기\n\ndf_mpg= mpg.groupby(\"drv\",as_index=False) \\\n            .agg(mean_hwy=(\"hwy\",\"mean\"))\n            \ndf_mpg\n\n\n\n\n\n\n\n\ndrv\nmean_hwy\n\n\n\n\n0\n4\n19.174757\n\n\n1\nf\n28.160377\n\n\n2\nr\n21.000000\n\n\n\n\n\n\n\n#barplot 사용해서 그래프 그리기\n\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\"), x=\"drv\",y=\"mean_hwy\",hue=\"drv\" )   \n\n\n\n\n\n\n\n\n##count plot 사용하기\n\nsns.countplot(data=mpg,x='drv')"
  },
  {
    "objectID": "posts/lecture8/index.html#scatter-plot-사용하기-316p",
    "href": "posts/lecture8/index.html#scatter-plot-사용하기-316p",
    "title": "교재 챕터8",
    "section": "scatter plot 사용하기 316P",
    "text": "scatter plot 사용하기 316P\n\npx.scatter(data_frame = mpg, x= 'cty',y='hwy',color='drv')"
  },
  {
    "objectID": "posts/lecture8/index.html#새로운-막대-그래프",
    "href": "posts/lecture8/index.html#새로운-막대-그래프",
    "title": "교재 챕터8",
    "section": "새로운 막대 그래프",
    "text": "새로운 막대 그래프\n\npx.bar(mpg, x=\"drv\",y=\"cty\",color=\"category\" )"
  },
  {
    "objectID": "posts/lecture8/index.html#새로운-막대-그래프-318p",
    "href": "posts/lecture8/index.html#새로운-막대-그래프-318p",
    "title": "교재 챕터8",
    "section": "새로운 막대 그래프 318p",
    "text": "새로운 막대 그래프 318p\n\npx.bar(mpg, x=\"drv\",y=\"cty\",color=\"category\" )"
  },
  {
    "objectID": "posts/lecture8/index.html#선그래프-319p",
    "href": "posts/lecture8/index.html#선그래프-319p",
    "title": "교재 챕터8",
    "section": "선그래프 319p",
    "text": "선그래프 319p\n\npx.line(mpg,x='model',y='year')"
  },
  {
    "objectID": "posts/HW3/index.html",
    "href": "posts/HW3/index.html",
    "title": "HW3",
    "section": "",
    "text": "#1\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nmpg=pd.read_csv(\"data/mpg.csv\")\nsns.scatterplot(data=mpg,x='cty',y='hwy')\nplt.show()\nplt.clf()\n#2\nmidw=pd.read_csv(\"data/midwest.csv\")\nmidw.columns\nsns.scatterplot(data =midw,x='poptotal',y='popasian').set(xlim=[0,500000],ylim=[0,10000])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#2\nmidw=pd.read_csv(\"data/midwest.csv\")\nmidw.columns\nsns.scatterplot(data =midw,x='poptotal',y='popasian').set(xlim=[0,500000],ylim=[0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/HW3/index.html#p",
    "href": "posts/HW3/index.html#p",
    "title": "HW3",
    "section": "",
    "text": "#1\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nmpg=pd.read_csv(\"data/mpg.csv\")\nsns.scatterplot(data=mpg,x='cty',y='hwy')\nplt.show()\nplt.clf()\n#2\nmidw=pd.read_csv(\"data/midwest.csv\")\nmidw.columns\nsns.scatterplot(data =midw,x='poptotal',y='popasian').set(xlim=[0,500000],ylim=[0,10000])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#2\nmidw=pd.read_csv(\"data/midwest.csv\")\nmidw.columns\nsns.scatterplot(data =midw,x='poptotal',y='popasian').set(xlim=[0,500000],ylim=[0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/HW3/index.html#section",
    "href": "posts/HW3/index.html#section",
    "title": "HW3",
    "section": "",
    "text": "211p\n\n#1\ndf=mpg.query('category==\"suv\"')\\\n      .groupby('manufacturer',as_index=False)\\\n      .agg(mean_cty=(('cty','mean')))\\\n      .sort_values('mean_cty',ascending=False)\\\n      .head()\n      \nsns.barplot(data=df,x='manufacturer',y= 'mean_cty')\n\n\n\n\n\n\n\n\n\n#2\nimport seaborn as sns\ndf=mpg.groupby('category',as_index=False)\\\n      .agg(n=('category','count'))\\\n      .sort_values('n',ascending=False)\nsns.barplot(data=df,x='category',y='n')"
  },
  {
    "objectID": "posts/HW4(확률분포함수들계산)/index.html",
    "href": "posts/HW4(확률분포함수들계산)/index.html",
    "title": "HW4",
    "section": "",
    "text": "#숙제1\n#정규분포 pdf 값을 계산하는 자신만의 \n#파이썬 함수를 정의하고 정규분포 mu=3 sigma=2의 pdf를 그릴것\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\n\ndef jungu(x,mu,sigma):\n    sss=(1/(sigma*((2*math.pi)**0.5)))* math.exp( ( -0.5) *( ((x-mu)/sigma) **2) )\n    return sss\n\njungu(0,3,2)\npdf_values=[]\n\nx_values = np.linspace(-5,10,100)\nfor x in np.linspace(-5,10,100):\n    pdf_values.append(jungu(x,3,2))\n\nplt.plot(x_values,pdf_values,color=\"red\",linewidth=2) # scatter는 점으로 line은 선으로\nplt.show()\n\n\n\n\n\n\n\n\n\n#2번\n\n#2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오\n#x ~ N(2,3^2)\n#1) P(x&lt;3)\n#2 P(2&lt;x&lt;5)\n#3 P(x&lt;3 or x&gt;7)\nfrom scipy.stats import norm\n#1)\nnorm.cdf(3,2,3)\n\nnp.float64(0.6305586598182363)\n\n\n\n#2 P(2&lt;x&lt;5)\nnorm.cdf(5,2,3)-norm.cdf(2,2,3)\n\nnp.float64(0.3413447460685429)\n\n\n\n#3P(x&lt;3 or x&gt;7)\n1-(norm.cdf(7,2,3)-norm.cdf(3,2,3)) \n\nnp.float64(0.678349012091051)\n\n\n\n3번\n\n#3.LS 빅데이터 스쿨 학생들의 중간고사점수는 평균이 30이고, 분산이 4인 정규분포를 따른다\n#상위 5%에 해당하는 학생의 점수는?\n\n0.05\n\nnorm.cdf(36.5794,30,2) # 왼쪽에서부터 지정한값까지 나올 확률을 다 더해줌(면적)\nnorm.ppf(0.95,30,2) # 상위 5% 즉 하위 95%값을 반환해줌 #정답\n\nnp.float64(33.28970725390295)"
  },
  {
    "objectID": "posts/HW5(표준분산)/index.html",
    "href": "posts/HW5(표준분산)/index.html",
    "title": "HW5",
    "section": "",
    "text": "#균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\n#1.n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용) #2.각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n#s_2분포\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import uniform\ns_2=[]\ns_1=[]\nfor k in range(10000):\n    x=uniform.rvs(loc=3,scale=4,size=20)\n    x_mean=np.mean(x)\n    a= (x-x_mean)**2\n    aa= sum(a)\n    s2=(1/(len(x)-1)) *aa\n    s1=(1/(len(x))) *aa\n    s_2.append(s2)   \n    s_1.append(s1) \ns_2    \n\n\nplt.hist(s_2, color = \"blue\")\nsss=uniform.rvs(loc=3,scale=4,size=20000)\nvar=np.var(sss)\n#모분산 표현\nplt.axvline(x=var,color=\"green\",linestyle='-',linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#s_1분포\nplt.hist(s_1, color = \"red\")\nplt.axvline(x=var,color=\"green\",linestyle='-',linewidth=2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n#3.결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\nprint(np.mean(s_2))\nprint(np.mean(s_1))\nvar\n\n1.3333158417808937\n1.266650049691849\n\n\nnp.float64(1.3262619108620732)\n\n\n#표본평균의 평균을 내었을때 s_2가 실제 분산과 더 가까우므로 s_2를 쓰는것이 맞다"
  },
  {
    "objectID": "posts/HW6/index.html",
    "href": "posts/HW6/index.html",
    "title": "HW6",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nraw_welfare = pd.read_spss('data/koweps/Koweps_hpwc14_2019_beta2.sav')\n\nwelfare = raw_welfare.copy()\n\nwelfare\n# 칼럼 알아보기 쉬운 이름으로 바꿔주기\nwelfare= welfare.rename(\n    \n    columns = { \n        'h14_g3' : 'sex',\n        'h14_g4' : \"birth\",\n        'h14_g10' : \"marriage_type\",\n        'h14_g11' : \"religion\",\n        'p1402_8aq1' : \"income\",\n        'h14_eco9' : \"code_job\",\n        \"h14_reg7\" : \"code_region\"\n        \n        }\n)\n\n#쓰는 데이터만 가져오기\nwelfare=welfare[[\"sex\", \"birth\", \"marriage_type\",\n                \"religion\", \"income\", \"code_job\", \"code_region\"]]\nwelfare.shape\n\n\nwelfare[\"sex\"] = np.where(welfare[\"sex\"]==1, 'male', 'female' )\n\n\nfrom scipy.stats import norm\nz_005=norm.ppf(0.95,loc=0,scale=1) #z값 구하기\n# 성별데이터 따로 만들기\nfemale_data=welfare.query('sex==\"female\"')\nmale_data=welfare.query('sex==\"male\"')\n\nfe=female_data.dropna(subset='income')[\"income\"] #female income 데이터\nme=male_data.dropna(subset='income')[\"income\"] #male income 데이터\n\nfe_v=np.var(fe,ddof=1) #n-1로 나눈 값(표본분산)\nme_v=np.var(me,ddof=1)\n\nfe_n=fe.count() #표본수 세기\nme_n=me.count()\n#평균값 만들기\nfe_mean_d=female_data.dropna(subset=\"income\") \\\n                     .groupby(\"sex\",as_index=False) \\\n                     .agg(mean_income = (\"income\",\"mean\"))\nme_mean_d=male_data.dropna(subset=\"income\") \\\n                  .groupby(\"sex\",as_index=False) \\\n                  .agg(mean_income = (\"income\",\"mean\"))\nfe_mean=fe_mean_d['mean_income'][0]                  \nme_mean=me_mean_d['mean_income'][0]                     \n                  \n#신뢰구간 연산                    \nfemale_a=fe_mean +z_005 *np.sqrt(fe_v) /np.sqrt(fe_n)  # 평균+z*표본분산/표본수\nfemale_b=fe_mean  -z_005 *np.sqrt(fe_v) /np.sqrt(fe_n) \n\nmale_a=me_mean +z_005 *np.sqrt(me_v) /np.sqrt(me_n) \nmale_b=me_mean  -z_005 *np.sqrt(me_v) /np.sqrt(me_n) \nprint(\"여자평균=\",fe_mean)\nprint(\"남자평균=\",me_mean)\nprint(\"남자 표본분산=\",fe_v)\nprint(\"여자 표본분산=\",me_v)\n\n여자평균= 186.29309576837417\n남자평균= 349.03757099169945\n남자 표본분산= 17439.157372096437\n여자 표본분산= 47463.96187451692\n\n\n##여자 신뢰구간 검은색 남자 신뢰구간 갈색\n\n#전체 그래프 그리기\nwelfare.dropna(subset=\"income\").shape\nsex_income=welfare.dropna(subset=\"income\") \\\n       .groupby(\"sex\",as_index=False) \\\n       .agg(mean_income = (\"income\",\"mean\"))\nsns.barplot(data=sex_income,x=\"sex\",y=\"mean_income\", hue=\"sex\")\nplt.axhline(y = female_a, color = 'black', linestyle = '-', linewidth = 2)\nplt.axhline(y = female_b, color = 'black', linestyle = '-', linewidth = 2)\nplt.axhline(y = male_a, color = 'brown', linestyle = '-', linewidth = 2)\nplt.axhline(y = male_b, color = 'brown', linestyle = '-', linewidth = 2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nwelfare.dropna(subset=\"income\").shape\nsex_income=welfare.dropna(subset=\"income\") \\\n       .groupby(\"sex\",as_index=False) \\\n       .agg(mean_income = (\"income\",\"mean\"))\nsns.barplot(data=sex_income,x=\"sex\",y=\"mean_income\", hue=\"sex\")\nplt.plot([-0.1, 0.1], [female_a, female_a], color='black')\nplt.plot([-0.1, 0.1], [female_b, female_b], color='black')\n\nplt.plot([0, 0], [female_a, female_b], color='black')\nplt.plot([1, 1], [male_a, male_b], color='black')\n\nplt.plot([0.9, 1.1], [male_a, male_a], color='black')\nplt.plot([0.9, 1.1], [male_b, male_b], color='black')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n##신뢰구간 선이 겹쳐서 나오는 문제가 발생 남자 여자 그래프 따로 그려서 보여주기\n\n#그리기용 데이터 프레임만들기\nfe_draw=pd.DataFrame({'sex' :[\"female\"],\n                   'mean_income' : [fe_mean]   })\nme_draw=pd.DataFrame({'sex' :[\"male\"],\n                   'mean_income' : [me_mean]   })\n#그래프 따로 그리기\n#여자 그래프\nsns.barplot(data=fe_draw,x=\"sex\",y=\"mean_income\", hue=\"sex\")\nplt.axhline(y = female_a, color = 'black', linestyle = '-', linewidth = 2)\nplt.axhline(y = female_b, color = 'black', linestyle = '-', linewidth = 2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n#남자 그래프\nsns.barplot(data=me_draw,x=\"sex\",y=\"mean_income\", hue=\"sex\")\nplt.axhline(y = male_a, color = 'black', linestyle = '-', linewidth = 2)\nplt.axhline(y = male_b, color = 'black', linestyle = '-', linewidth = 2)\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/HW7/index.html",
    "href": "posts/HW7/index.html",
    "title": "HW7",
    "section": "",
    "text": "슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22 년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여 한다고 한다. 다음은 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다. 15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804 표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정) 1. 𝑡 검정을 위한 가정체크를 진행하세요. 2. 검정을 위한 가설을 명확하게 서술하시오. 3. 검정통계량 계산하시오. 4. p‑value을 구하세요.\n\nfrom scipy.stats import norm\nimport pandas as pd\nimport seaborn as sns    \nimport matplotlib.pyplot as plt\nimport numpy as np    \n1-norm.cdf(18,loc=10,scale=1.96)\n# apd 57P문제\n#귀무가설: 현대자동차 에너지 소비효율은 16이상이다\ns=[15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804]\n\ns_mean=np.mean(s)\ns_std=np.std(s,ddof=1) # 표준편차 구할때는 n-1이므로 ddof=1로 해주기\ns_n=len(s)\n\nt_s=(16-s_mean)/(s_std/np.sqrt(s_n))\n\n\nfrom scipy.stats import t\n\np_value=1-t.cdf(t_s,df=s_n-1) #16이상이므로 단측 cdf t.cdf 왼쪽에서부터 지정한 값까지의 면적\nprint(\"P_value는 \",p_value)\n#0.957로 0.001보다 크므로 귀무가설을 체택한다\n\nP_value는  0.04276241766420785\n\n\n\n현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.\n\n\n# 95%신뢰구간\n#t.ppf 하위 %값을 반환해줌 ex)t.ppf(0.975,df=s_n-1) 하위 97.5%까지의 값 즉 상위 2.5% 값을 반환해준다\na=16 + t.ppf(0.975,df=s_n-1) *s_std / np.sqrt(s_n)\nb=16 - t.ppf(0.975,df=s_n-1) *np.std(s,ddof=1) / np.sqrt(s_n)\nprint(\"신뢰 구간은\",b,\"~\",a,\"이다\")\n\n신뢰 구간은 15.4571309070064 ~ 16.542869092993598 이다"
  }
]